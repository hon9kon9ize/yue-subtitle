generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Source {
  id        String     @id @default(cuid())
  type      SourceType
  url       String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  userId    String     @map("user_id")
  User      User?      @relation(fields: [userId], references: [id])
  subtitles Subtitle[]

  @@index([userId], map: "sources_user_id_fkey")
  @@map("sources")
}

model Subtitle {
  id         String         @id @default(cuid())
  title      String
  data       String // JSON
  status     SubtitleStatus @default(PENDING)
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @updatedAt @map("updated_at")
  sourceId   String         @map("source_id")
  userId     String         @map("user_id")
  Permission Permission[]
  source     Source         @relation(fields: [sourceId], references: [id])
  user       User           @relation(fields: [userId], references: [id])

  @@index([sourceId], map: "subtitles_source_id_fkey")
  @@index([userId], map: "subtitles_user_id_fkey")
  @@map("subtitles")
}

model Permission {
  id         Int      @id @default(autoincrement())
  name       String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  subtitleId String   @map("subtitle_id")
  userId     String   @map("user_id")
  subtitle   Subtitle @relation(fields: [subtitleId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([subtitleId], map: "permissions_subtitle_id_fkey")
  @@index([userId], map: "permissions_user_id_fkey")
  @@map("permissions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Source        Source[]
  Subtitle      Subtitle[]
  Permission    Permission[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum SourceType {
  YOUTUBE
  AUDIO
  VIDEO
}

enum SubtitleStatus {
  PENDING
  PROCESSING
  DRIFT
  DONE
  ERROR
}
